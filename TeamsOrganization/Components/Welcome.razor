@using Azure.Core
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using Microsoft.Graph
@using System.Linq
@using OrganizationTest.Model

@inject IJSRuntime JSRuntime
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager

@if(_isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
		<FluentProgressRing/>
	</div>
}
else if (_isInTeams)
{
    <div class="welcome-container">
        @if (_errorMessage.Length > 0)
        {
            <a>@_errorMessage</a>
        }
        <div>
            <button @onclick=CallUserEvent disabled=@CallButtonEnable() >채팅하기</button>
        </div>   
        <div class="user-table">
            <div class="search-user-table">
                <h3>유저 검색</h3>
                <SearchUserTable SelectUser="_selectUsers" OnSelectSearchUserEvent="SelectSearchUser" />
            </div>
            <div class="all-user-table">
                @if (_userDept.Count > 0)
                {
                    <h3>전체 목록</h3>
                    <UserTable UserModel="_userDept" SelectedUserModel="_selectUsers" IsRoot=true OnSelectUserEvent="SelectUser"/>
                }
            </div>
            <div class="select-user-table">
                @if (_selectUsers.Count > 0)
                {
                    <h3>선택 된 사람</h3>
                    <SelectUserTable SelectUser="_selectUsers" OnUnSelectUserEvent="UnSelectUserEvent" />
                }
            </div>
        </div>
    </div>
}
else
{
    @if (_errorMessage.Length > 0)
    {
        <a>@_errorMessage</a>
    }
}

@code {
    // add search componenet
    // css 정리

    string _errorMessage = "";
    List<UserDeptModel> _userDept = new();
    List<User> _allUsers = new();
    List<User> _selectUsers = new();
    User _currentUser;
    bool _isInTeams;
    bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            _isInTeams = await MicrosoftTeams.IsInTeams();
            if (_isInTeams)
            {
                await InitUserTable();
            }
            else
            {
                _errorMessage = "팀스 앱 안에서만 동작합니다.";
            }

            _isLoading = false;
            StateHasChanged();            
        }
    }
    private async Task InitUserTable()
    {
        try
        {
            var currentUser = await teamsUserCredential.GetUserInfoAsync();
            var users = await GetGraphService().Users.Request().GetAsync();
            while(true)
            {
                for (int i = 0; i < users.CurrentPage.Count; i++)
                {
                    if (users.CurrentPage[i].Id == currentUser.ObjectId)
                    {
                        _currentUser = users.CurrentPage[i];
                        continue;
                    }
                    if (users.CurrentPage[i].Mail == null || users.CurrentPage[i].Mail.Length <= 0)
                    {
                        continue;
                    }
                    if (users.CurrentPage[i].DisplayName.Contains("관리자") || users.CurrentPage[i].DisplayName.Contains("테스트"))
                    {
                        continue;
                    }
                    _allUsers.Add(users.CurrentPage[i]);
                }
                if (users.NextPageRequest == null)
                {
                    break;
                }

                users = await users.NextPageRequest.GetAsync();
            }

            _allUsers.Sort(delegate (User x, User y)
            {
                if (x.OfficeLocation == null && y.OfficeLocation == null) return 0;
                else if (x.OfficeLocation == null) return -1;
                else if (y.OfficeLocation == null) return 1;
                else return x.OfficeLocation.CompareTo(y.OfficeLocation);
            });

            _allUsers.FindAll(x => !(x.OfficeLocation ?? "").Contains("/")).ForEach(x =>
            {
                _userDept.Add(new UserDeptModel(x.OfficeLocation, x));
            });

            _allUsers.FindAll(x => (x.OfficeLocation ?? "").Contains("/")).ForEach(x =>
            {
                UserDeptModel.SetChild(_userDept, x, 0);
            });
        }
        catch(Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }
    private void SelectSearchUser(User user)
    {
        if (_selectUsers.Find(x => x.Id == user.Id) == null)
        {
            _selectUsers.Add(user);
        }
    }
    private void SelectUser(User user)
    {
        if (_selectUsers.Find(x => x.Id == user.Id) == null)
        {
            _selectUsers.Add(user);
        }
    }
    private void UnSelectUserEvent(User user)
    {
        _selectUsers.Remove(user);
    }
    private async void CallUserEvent()
    {
        ChatMembersCollectionPage members = new();

        members.Add(new AadUserConversationMember
        {
            Roles = new List<string>()
            {
              "owner"  
            },
            AdditionalData = new Dictionary<string, object>()
            {
                {"user@odata.bind", $"https://graph.microsoft.com/v1.0/users('{_currentUser.Id}')"}
            }
        });
        _selectUsers.ForEach(x =>
        {
            members.Add(new AadUserConversationMember
            {
                Roles = new List<string>()
                {
                    "owner"
                },
                AdditionalData = new Dictionary<string, object>()
                {
                    {"user@odata.bind", $"https://graph.microsoft.com/v1.0/users('{x.Id}')"}
                }
            });
        });
        var chat = new Chat
        {
            ChatType = ChatType.Group,
            Topic = $"{DateTime.Now.ToString("yyyy-MM-dd hh시 mm분 ss초")} org service",
            Members = members,
        };

        try
        {
            var ret = await GetGraphService().Chats.Request().AddAsync(chat);
            var webUrl = ret.AdditionalData["webUrl"].ToString();
            await JSRuntime.InvokeVoidAsync("openInternet", webUrl);
            //            await JSRuntime.InvokeVoidAsync("open", $"{webUrl}", "_blank");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
            _errorMessage = ex.Message;
        }
        return;
    }
    private bool CallButtonEnable()
    {
        if (_selectUsers.Count > 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    private GraphServiceClient GetGraphService()
    {
        return new(teamsUserCredential);
    }
}

